#!/usr/bin/env hush

# -----------
#  VARIABLES
# -----------
let logFolder = "/tmp/jalopezma-install"
let logFile = logFolder ++ "/install.log"

# -----------
#  FUNCTIONS
# -----------

# Gets the date and trims the break line at the end
function getDate()
  std.trim(${ date }.stdout)
end

# Prints to stdout and log file
function print(message)
  std.print(message)
  # Trim to remove the new line at the end
  let date = getDate()
  ${ echo "[$date] $message" >> $logFile }
end

function existsFile(filename)
  let res = ${ test -f $filename }
  if std.type(res) == "error" then
    return false
  end
  return true
end

function existsFolder(folder)
  let res = ${ test -d $folder }
  if std.type(res) == "error" then
    return false
  end
  return true
end

# Checks if the log folder and file exists and if not it creates them
function setupLogFolderAndFile(logFolder, logFile)
  if not existsFolder(logFolder) then
    { mkdir -p $logFolder }
    std.print(logFolder ++ " created")
  end

  if not existsFile(logFile) then
    { touch $logFile }
    print(logFile ++ " created")
  end
end

# Helps to print the output of the command if the verbose flag is set
function run()
  # local output=$1
  # local verbose=${2:-false}
  # if $verbose && [ ! -z $output ]; then
    # echo "$output"
  # fi
  # echo "$output" >> $logFile
end

function createSymlink()
  # local from=$1
  # local to=$2
  # if [ -f $to ] || [ -d $to ]; then
    # echo "[main] File/folder \"$to\" already exists"
  # else
    # run "$(ln -s $from $to)" $verbose
  # fi
end

function showHelp()
  # To update the link to the script
  let scriptUrl = "https://raw.githubusercontent.com/jalopezma/dotfiles/add-install-script/install.sh"
  let wgetCommand = "wget -O- " ++ scriptUrl
  {
    echo "
  \$ ./install.sh <arguments>
  \$ bash -c \"\$($wgetCommand)\" \"\" [<arguments>]
      -h, --help: Shows this message
      -v, --verbose: Enables a more verbose output"
  }
end

function parseArguments()
end

# ----------
# EXECUTION
# ----------

setupLogFolderAndFile(logFolder, logFile)
showHelp()

# print "[main] install.sh"
# print "[main] update & upgrade"
# run "$(sudo apt-get update && sudo apt-get upgrade -y)" $verbose

# print "[main] Install wget curl git google-chrome-stable"
# run "$(sudo apt-get install wget curl git -y)" $verbose
# print "[main] $(git --version)"

# print "[main] Download Google chrome"
# run "$(wget -q -P /tmp/ https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb)" $verbose
# print "[main] Install Google chrome"
# run "$(sudo dpkg -i /tmp/google-chrome-stable_current_amd64.deb)" $verbose

# reposFolder=~/repos
# if [ -d $reposFolder ]; then
  # print "[main] \"$reposFolder\" folder already exists"
# else
  # print "[main] Create \"$reposFolder\" folder"
  # mkdir -p $reposFolder
# fi
# cd "$reposFolder"

# if [ -d ~/repos/dotfiles ]; then
  # dotfilesTmp=/tmp/dotfiles_$(date +%s)
  # print "[main] Move existing dotfiles repo to $dotfilesTmp"
  # mv ~/repos/dotfiles $dotfilesTmp
# fi
# print "[main] Clone jalopezma/dotfiles.git"
# # TODO remove the branch git clone https://github.com/jalopezma/dotfiles.git
# run "$(git clone --branch add-install-script https://github.com/jalopezma/dotfiles.git 2>&1)" $verbose
# cd ~/repos/dotfiles
# print "[main] Change directory to $(pwd)"

# print "[scripts] Link scripts"
# createSymlink ~/repos/dotfiles/scripts ~/scripts

# print "[wallpapaers] Link wallpapers"
# createSymlink ~/repos/dotfiles/wallpapers ~/wallpapers

# bash ./git/install.sh "$verbose"
# bash ./zsh/install.sh "$verbose"
# bash ./nvm/install.sh "$verbose"
# bash ./nvim/install.sh "$verbose"

# bash ./rofi/install.sh "$verbose"
# bash ./monitors/install.sh "$verbose"
# bash ./i3/install.sh "$verbose"
# bash ./polybar/install.sh "$verbose"
# bash ./alacritty/install.sh "$verbose"
# bash ./beekeper-studio/install.sh "$verbose"

# Already installed âœ“
# git
# zsh
# nvm
# nvim
# rofi
# monitors - script/service
# i3
# polybar
# alacritty
# beekeeperstudio

# ssh: keys and agent?
# aws credentials ?
# programs that I use
# - bluetooth?
# - yvpn
# - pyenv
# - gvm (golang virtual manager)
